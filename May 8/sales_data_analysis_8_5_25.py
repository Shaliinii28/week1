# -*- coding: utf-8 -*-
"""Sales Data Analysis 8/5/25.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tb7FtdMyvW2Kh77GoV1BAD5ZXSt3vP8x
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import re
from collections import Counter

file_path = 'sales_data_sample.csv'

#load and clean data
try:
    df = pd.read_csv(file_path, encoding='cp1252')
    print(f"Successfully loaded {file_path}")

    # Clean data
    df['ORDERDATE'] = pd.to_datetime(df['ORDERDATE'])
    df['TOTAL_SALES'] = df['QUANTITYORDERED'] * df['PRICEEACH']
    df['YEAR'] = df['ORDERDATE'].dt.year
    df['MONTH'] = df['ORDERDATE'].dt.month
    df = df.dropna(subset=['QUANTITYORDERED', 'PRICEEACH', 'ORDERDATE'])
    print("Data cleaned successfully")
except FileNotFoundError:
    print(f"Error: File '{file_path}' not found.")
    df = None
except Exception as e:
    print(f"Error processing data: {e}")
    df = None

#analyze yearly sales
if df is not None:
    try:
        yearly_sales = df.groupby('YEAR')['TOTAL_SALES'].sum().reset_index()
        print("\nYearly Sales Summary:")
        print(yearly_sales)
    except Exception as e:
        print(f"Error analyzing yearly sales: {e}")
        yearly_sales = None

#analyze product line sales
if df is not None:
    try:
        product_sales = df.groupby('PRODUCTLINE')['TOTAL_SALES'].sum().reset_index()
        print("\nProduct Line Sales:")
        print(product_sales)
    except Exception as e:
        print(f"Error analyzing product sales: {e}")
        product_sales = None

#analyze top customers
if df is not None:
    try:
        customer_sales = df.groupby('CUSTOMERNAME')['TOTAL_SALES'].sum().nlargest(5).reset_index()
        print("\nTop 5 Customers by Sales:")
        print(customer_sales)
    except Exception as e:
        print(f"Error analyzing customer sales: {e}")
        customer_sales = None

#calculate statistics : mean, median, std dev
if df is not None:
    try:
        total_sales = df['TOTAL_SALES'].values
        mean_sales = np.mean(total_sales)
        median_sales = np.median(total_sales)
        std_sales = np.std(total_sales)

        print("\nSales Statistics:")
        print(f"Mean Sales: ${mean_sales:.2f}")
        print(f"Median Sales: ${median_sales:.2f}")
        print(f"Standard Deviation: ${std_sales:.2f}")
    except Exception as e:
        print(f"Error calculating statistics: {e}")

#count words in CUSTOMERNAME - using previous day function here
if df is not None:
    try:
        text = ' '.join(df['CUSTOMERNAME'].astype(str).str.lower())
        words = re.findall(r'\b\w+\b', text)
        word_counts = Counter(words)
        sorted_counts = sorted(word_counts.items(), key=lambda x: (-x[1], x[0]))

        print("\nTop 5 Words in CUSTOMERNAME:")
        for word, count in sorted_counts[:5]:
            print(f"{word}: {count}")
    except Exception as e:
        print(f"Error counting words: {e}")

#plot bar chart
if yearly_sales is not None:
    try:
        plt.figure(figsize=(10, 6))
        plt.bar(yearly_sales['YEAR'].astype(str), yearly_sales['TOTAL_SALES'], color='skyblue')
        plt.title('Annual Sales Revenue', fontsize=16)
        plt.xlabel('Year', fontsize=12)
        plt.ylabel('Total Sales ($)', fontsize=12)
        plt.grid(True, axis='y', linestyle='--', alpha=0.7)
        plt.savefig('annual_sales.png')
        plt.show()
        print("\nBar chart saved as 'annual_sales.png'")
    except Exception as e:
        print(f"Error plotting chart: {e}")

#save analysis results
if yearly_sales is not None and product_sales is not None and customer_sales is not None:
    try:
        with open('analysis_results.txt', 'w') as file:
            file.write("Sales Analysis Results\n\n")
            file.write("Yearly Sales Summary:\n")
            file.write(yearly_sales.to_string(index=False))
            file.write("\n\nProduct Line Sales:\n")
            file.write(product_sales.to_string(index=False))
            file.write("\n\nTop 5 Customers:\n")
            file.write(customer_sales.to_string(index=False))
        print("Analysis results saved to analysis_results.txt")
    except Exception as e:
        print(f"Error saving results: {e}")